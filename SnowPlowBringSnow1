local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local originalPositions = {}
local isSnowBeingBrought = false
local snowLoop

local function getSnowParts()
    local parts = {}
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.Name == "Snow1" then
            table.insert(parts, part)
            if not originalPositions[part] then
                originalPositions[part] = part.CFrame
            end
        end
    end
    return parts
end

local function bringAllSnowToFeet(snowParts)
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            for _, snowPart in ipairs(snowParts) do
                if snowPart and snowPart:IsDescendantOf(workspace) then
                    snowPart.CFrame = rootPart.CFrame * CFrame.new(0, -rootPart.Size.Y / 2 - snowPart.Size.Y / 2, 0)
                end
            end
        end
    end
end

local function resetSnowParts()
    for snowPart, originalCFrame in pairs(originalPositions) do
        if snowPart and snowPart:IsDescendantOf(workspace) then
            snowPart.CFrame = originalCFrame
        end
    end
end

local function toggleSnowBehavior(isEnabled)
    if isEnabled then
        isSnowBeingBrought = true
        snowLoop = coroutine.create(function()
            while isSnowBeingBrought do
                local snowParts = getSnowParts()
                if #snowParts > 0 then
                    bringAllSnowToFeet(snowParts)
                else
                    warn("No parts named 'Snow1' found in the workspace!")
                end
                task.wait(2)
            end
        end)
        coroutine.resume(snowLoop)
    else
        isSnowBeingBrought = false
        resetSnowParts()
    end
end
